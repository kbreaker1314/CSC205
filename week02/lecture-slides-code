/*
 * Lecture slides / textbook code - Week 2
 * Identifier, Arithmetic Operators, etc.
 */
using System;
namespace ThinkSharp
{
    public class Hello
    {
        public static void Main(string[] args)
        {
            Console.WriteLine(5 + 2);
            Console.WriteLine(5 - 2);
            Console.WriteLine(5 * 2);
            Console.WriteLine(5 / 2);
            Console.WriteLine(5.0 / 2.0);
            //1stNumber = 5;
            //2ndNumber = 2;
            //Console.WriteLine(1stNumber + 2ndNumber);
            //Console.WriteLine(1stNumber - 2ndNumber);
            //Console.WriteLine(1stNumber * 2ndNumber);
            //Console.WriteLine(1stNumber / 2ndNumber);
        }
    }
}


/*
 * Lecture slides / textbook code - Week 2
 * Chapter 3 Section 3.2 Converting from double to int
 */
using System;
namespace ThinkSharp
{
    public class Week02
    {
        public static void Main(string[] args)
        {
            //What are the values in variables x, y, z, m, n, p and q?
            int x = 1; // what if int x = 1.1;
            double y = 1;
            double z = 1 / 3;
            double m = 1.0 / 3.0;
            double n = 1 / 3.0;
            double pi = 3.14159;
            int p = (int)pi;
            double q = (int)pi * 20.0;
            Console.WriteLine("x=" + x);
            Console.WriteLine("y=" + y);
            Console.WriteLine("z=" + z);
            Console.WriteLine("m=" + m);
            Console.WriteLine("n=" + n);
            Console.WriteLine("p=" + p); 
            Console.WriteLine("q=" + q);
        }
    }
}


/*
 * Lecture slides / textbook code - Week 2
 * Chapter 3 Section 3.3 Math Methods
 * note that if the following math expressions are a bit too difficult for you, don't worry too much.
 */

using System;
namespace ThinkSharp
{
    public class Week02
    {
        public static void Main(string[] args)
        {
            double root = Math.Sqrt(17.0);
            double angle = 1.5;
            double height = Math.Sin(angle);
            Console.WriteLine("root=" + root);
            Console.WriteLine("angle=" + angle); 
            Console.WriteLine("height=" + height);

            int x = (int)Math.Round(Math.PI * 20.0);
            double y = Math.Cos(angle + Math.PI / 2);
            double z = Math.Exp(Math.Log(10.0)); //this one might too difficult for you. if so, skip this one!
            Console.WriteLine("x=" + x);
            Console.WriteLine("y=" + y);
            Console.WriteLine("z=" + z);
        }
    }
}



/*
 * Lecture slides / textbook code
 * 3.5 Adding New Methods
 * 3.6 Classes and methods
 */
using System;

namespace CSC205
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("First line.");
            ThreeLine();
            Console.WriteLine("Second line.");
        }
        public static void NewLine()
        {
            Console.WriteLine("");
        }
        public static void ThreeLine()
        {
            NewLine();
            NewLine();
            NewLine();
        }
    }
}


/*
 * Lecture slides / textbook code
 * 3.8 Method Parameters and Arguments
 */
using System;

namespace CSC205
{
    public class Program
    {
        public static void Main(string[] args)
        {
            string argument = "Never say never.";
            WriteTwice(argument);
        }
        public static void WriteTwice(string str)
        {
            Console.WriteLine(str);
            Console.WriteLine(str);
        }
    }
}


/*
 * Lecture slides / textbook code
 * 3.10 Methods with multiple parameters
 */
using System;

namespace CSC205
{
    public class Program
    {
        public static void Main(string[] args)
        {
            int hour = 11;
            int minute = 59;
            WriteTime(hour, minute);
        }
        public static void WriteTime(int hour, int minute)
        {
            Console.Write(hour);
            Console.Write(":");
            Console.WriteLine(minute);
        }
    }
}


/*
 * Lecture slides / textbook code
 * 4.6 The Return Statement
 * Version 1: WriteLog() method with the return type of void
 */

using System;

namespace CSC205Week02
{
    class Program
    {
        static void Main(string[] args)
        {
            double x;
            Console.WriteLine("Enter a floating number:" );
            // Convert.ToDouble converts the string taken in by Console.ReadLine() to a double value
            x = Convert.ToDouble(Console.ReadLine());
            // call WriteLogarithm by passing the value of x in Main method to the x in WriteLogarithm method
            WriteLogarithm(x);
        }

        public static void WriteLogarithm(double x)
        {
            if (x <= 0.0)
            {
                Console.WriteLine("Positive numbers only, please");
                return; // return nothing because the return type of WriteLogarithm is void
            }
            double result = Math.Log(x); // Compute the natural logarithm of x
            Console.WriteLine($"The natural logarithm of {x} is {result}"); // Display the result
        }
    }
}


